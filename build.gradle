buildscript {
  if ("$gradle.gradleVersion" != "6.3") {
    throw new GradleException("Gradle version 6.3 is required (received $gradle.gradleVersion)")
  }

  // https://github.com/gradle/gradle/issues/11308#issuecomment-554317655
  if (System.properties['org.gradle.internal.publish.checksums.insecure'] != 'true') {
    throw new GradleException("org.gradle.internal.publish.checksums.insecure must be 'true'")
  }

  ext.kotlin_version = "1.3.72"

  repositories {
    mavenCentral()
    google()
    jcenter()
  }

  dependencies {
    classpath "com.android.tools.build:gradle:4.0.0"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath "digital.wup:android-maven-publish:3.6.3"
    classpath "com.vanniktech:gradle-android-junit-jacoco-plugin:0.16.0"
    classpath "biz.aQute.bnd:biz.aQute.bnd.gradle:5.1.1"
  }
}

plugins {
  id "com.github.ben-manes.versions" version "0.28.0"
  id "com.vanniktech.android.junit.jacoco" version "0.16.0"
  id "digital.wup.android-maven-publish" version "3.6.3"
  id "ru.vyarus.animalsniffer" version "1.5.0"
}

ext {
  androidBuildToolsVersion = "29.0.2"
  androidCompileSDKVersion = 28
  androidMinimumSDKVersion = 21
  androidTargetSDKVersion = 28

  if (!project.hasProperty("mavenCentralUsername")) {
    logger.warn("No mavenCentralUsername property specified: Using an empty value")
    mavenCentralUsername = ""
  }
  if (!project.hasProperty("mavenCentralPassword")) {
    logger.warn("No mavenCentralPassword property specified: Using an empty value")
    mavenCentralPassword = ""
  }

  if (project.hasProperty("org.librarysimplified.directory.publish")) {
    useDirectoryPublishPath = project.property("org.librarysimplified.directory.publish")
    useDirectoryPublish = true
    logger.warn("org.librarysimplified.directory.publish is set: We will publish artifacts to ${useDirectoryPublishPath}")
  } else {
    logger.warn("org.librarysimplified.directory.publish is not set: We will not publish artifacts to a custom directory")
    useDirectoryPublish = false
    useDirectoryPublishPath = null
  }
}

subprojects {
  // Force version 1.0.2 of appcompat. A bug in 1.1.0 causes a crash on API 21.
  //
  // https://issuetracker.google.com/issues/141132133#comment42
  //
  // TODO: Remove once appcompat:1.2.0 is available.
  configurations.all {
    resolutionStrategy.force 'androidx.appcompat:appcompat:1.0.2'
  }

  //
  // We currently have transitive dependencies that specify dependencies on newer versions
  // of SLF4J. These are subtly incompatible with Logback-Android, and it will be a while before
  // new versions appear of both artifacts. Remove this when both are updated!
  //
  configurations.all {
    resolutionStrategy.force libraries.slf4j
  }
}

ext.libraries = [
  androidXAppCompat       : "androidx.appcompat:appcompat:1.0.2",
  androidXRecyclerView    : "androidx.recyclerview:recyclerview:1.1.0",
  androidXTestEspresso    : "androidx.test.espresso:espresso-core:3.3.0-alpha02",
  androidXTestExtJunit    : "androidx.test.ext:junit:1.1.2-alpha02",
  androidXTestOrchestrator: "androidx.test:orchestrator:1.1.0",
  androidXTestRules       : "androidx.test:rules:1.1.0",
  androidXTestRunner      : "androidx.test:runner:1.1.0",
  googleExoplayer         : "com.google.android.exoplayer:exoplayer:r1.5.15",
  googleGuava             : "com.google.guava:guava:27.1-android",
  irradiaFieldrushAPI     : "one.irradia.fieldrush:one.irradia.fieldrush.api:0.0.8",
  irradiaFieldrushVanilla : "one.irradia.fieldrush:one.irradia.fieldrush.vanilla:0.0.8",
  irradiaMimeAPI          : "one.irradia.mime:one.irradia.mime.api:1.0.0",
  irradiaMimeVanilla      : "one.irradia.mime:one.irradia.mime.vanilla:1.0.0",
  jacksonCore             : "com.fasterxml.jackson.core:jackson-core:2.10.2",
  jacksonDatabind         : "com.fasterxml.jackson.core:jackson-databind:2.10.2",
  jcip                    : "com.io7m.jcip:jcip-annotations:1.0.2",
  jodaTime                : "joda-time:joda-time:2.10.5",
  junit                   : "junit:junit:4.12",
  kotlinStdlib            : "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version",
  logbackAndroid          : "com.github.tony19:logback-android:2.0.0",
  logbackClassic          : "ch.qos.logback:logback-classic:1.3.0-alpha4",
  mockito                 : "org.mockito:mockito-core:2.27.0",
  nimbusJoseJWT           : "com.nimbusds:nimbus-jose-jwt:8.20",
  okhttp                  : "com.squareup.okhttp3:okhttp:3.14.1",
  quicktheories           : 'org.quicktheories:quicktheories:0.26',
  rxjava                  : "io.reactivex:rxjava:1.3.8",
  slf4j                   : "org.slf4j:slf4j-api:1.7.25",
]

apply plugin: "com.vanniktech.android.junit.jacoco"

allprojects {
  group = project.ext["GROUP"]
  version = project.ext["VERSION_NAME"]
}

subprojects { project ->

  switch (POM_PACKAGING) {
    case "jar":
      logger.info("Configuring ${project} (${POM_PACKAGING}) as jar project")

      apply plugin: "java"
      apply plugin: "java-library"
      apply plugin: "kotlin"

      /*
       * Apply the Animal Sniffer plugin to check that code is Android compatible.
       */

      apply plugin: "ru.vyarus.animalsniffer"

      dependencies {
        signature "org.codehaus.mojo.signature:java16:1.1@signature"
        signature "net.sf.androidscents.signature:android-api-level-14:4.0_r4@signature"
      }

      /*
       * Build an OSGi bundle.
       */

      apply plugin: "biz.aQute.bnd.builder"

      jar {
        bnd """
Automatic-Module-Name: ${POM_AUTOMATIC_MODULE_NAME}

-removeheaders: Bnd-LastModified, Tool, Private-Package
"""
      }
      break

    case "apk":
      logger.info("Configuring ${project} (${POM_PACKAGING}) as Android application project")

      apply plugin: "com.android.application"
      apply plugin: "kotlin-android"

      android {
        compileSdkVersion androidCompileSDKVersion
        buildToolsVersion androidBuildToolsVersion

        defaultConfig {
          minSdkVersion androidMinimumSDKVersion
          targetSdkVersion androidTargetSDKVersion
          testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        }
        compileOptions {
          sourceCompatibility JavaVersion.VERSION_1_8
          targetCompatibility JavaVersion.VERSION_1_8
        }
        testOptions {
          execution "ANDROIDX_TEST_ORCHESTRATOR"
          animationsDisabled = true
        }
      }
      break

    case "aar":
      logger.info("Configuring ${project} (${POM_PACKAGING}) as Android library project")

      apply plugin: "com.android.library"
      apply plugin: "kotlin-android"

      android {
        compileSdkVersion androidCompileSDKVersion
        buildToolsVersion androidBuildToolsVersion

        defaultConfig {
          minSdkVersion androidMinimumSDKVersion
          targetSdkVersion androidTargetSDKVersion
          testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        }
        compileOptions {
          sourceCompatibility JavaVersion.VERSION_1_8
          targetCompatibility JavaVersion.VERSION_1_8
        }
        testOptions {
          execution "ANDROIDX_TEST_ORCHESTRATOR"
          animationsDisabled = true
        }
      }
      break

    default:
      throw new IllegalStateException(
        "Unrecognized packaging type ${POM_PACKAGING} for ${project}")
  }

  task javadocsJar(type: Jar) {
    classifier = "javadoc"
  }

  task sourcesJar(type: Jar) {
    classifier = "sources"
    from "src/main/java", "src/main/resources"
  }

  apply plugin: "digital.wup.android-maven-publish"
  apply plugin: "signing"

  publishing {
    publications {
      basicJar(MavenPublication) {

        switch (POM_PACKAGING) {
          case "jar":
            from components.java
            break

          case "apk":
            break

          case "aar":
            from components.android
            break
        }

        artifact sourcesJar
        artifact javadocsJar

        pom {
          artifactId = POM_ARTIFACT_ID
          name = POM_NAME
          packaging = POM_PACKAGING
          description = POM_DESCRIPTION
          url = POM_URL

          scm {
            connection = POM_SCM_CONNECTION
            developerConnection = POM_SCM_DEV_CONNECTION
            url = POM_SCM_URL
          }

          licenses {
            license {
              name = POM_LICENCE_NAME
              url = POM_LICENCE_URL
            }
          }

          developers {
            developer {
              id = POM_DEVELOPER_ID
              name = POM_DEVELOPER_NAME
              email = POM_DEVELOPER_EMAIL
              url = POM_DEVELOPER_URL
            }
          }
        }
      }
    }

    repositories {
      if (useDirectoryPublish) {
        logger.info("Using ${useDirectoryPublishPath} for publication")

        maven {
          name = "Directory"
          url = "file://${useDirectoryPublishPath}"
        }
      }

      if (version.endsWith("SNAPSHOT")) {
        logger.info("Using Sonatype snapshots repository for publication")
        maven {
          url = "https://oss.sonatype.org/content/repositories/snapshots/"
          credentials(PasswordCredentials) {
            username mavenCentralUsername
            password mavenCentralPassword
          }
        }
      }
    }
  }

  signing {
    useGpgCmd()
    sign publishing.publications.basicJar
  }

  tasks.withType(Sign) { task ->
    def isSnapshot = version.endsWith("SNAPSHOT")

    // Sign release versions only; not snapshots
    onlyIf {
      if (isSnapshot) {
        logger.warn("$POM_NAME: '$version' is a snapshot version; artifacts will not be signed")
      } else {
        logger.info("$POM_NAME: '$version' is a release version; artifacts will be signed")
      }
      return !isSnapshot
    }
  }

  repositories {
    mavenLocal()
    mavenCentral()

    // Sonatype snapshots
    maven {
      url "https://oss.sonatype.org/content/repositories/snapshots/"
    }

    jcenter()
    google()
  }
}

// Add ktlint tasks to root project. This executes faster than configuring
// the tasks for each subproject individually.

apply from: file("$rootDir/ktlint.gradle")